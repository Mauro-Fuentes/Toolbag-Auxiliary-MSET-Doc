{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"TAMMDoc","text":"<p>Welcome to Toolbag Auxiliary MSET Module Documentation \u00abTAMMDoc\u00bb</p> <p></p> <p>This page is intended to work as a layer on top of our official documentation. You will find code, pictures, charts, and examples on how to use the API so you can create your own addons.</p> <p>For full documentation visit TB5 Python API</p> <p></p> <p>\ud83d\udc48 Feel free to navigate through all the code that it is available for you.</p>"},{"location":"License.html","title":"License","text":"<p>Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International (CC BY-NC-ND 4.0)</p> <p>This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International License. You may share this work with attribution but cannot modify or use it for commercial purposes.</p> <p>Full License Text: https://creativecommons.org/licenses/by-nc-nd/4.0/</p>"},{"location":"main_pages/classes/entities.html","title":"Entities","text":"<p>The words Entities and Modules are not really part of the official docs. It is just a new concept that helps to organise this Auxiliary Doc in a mnemonic manner.</p> <p>Entities are the combination of various modules.</p> <p>Entities are objects that you can add in the Scene Tab. In other words, if you can add it to the Scene Hierarchy, then it is an entity.</p> <p>All entities derive from a common ancestor called SceneObject, but there are two main groups:</p> <ul> <li>Those with Transform: those you can move around. </li> <li>Those without Transform: there's no need to move them.</li> </ul> <p></p> <p>This is the main extructure:</p> <pre><code>\ngraph LR\n    A[SceneObject] --&gt; B[Backdrop]\n    A --&gt; C[Baker]\n    A --&gt; D[BakerTarget]\n    A --&gt; E[Fog]\n    A --&gt; F[Render]\n    A --&gt; G[SkyBox]\n    A --&gt; H[SubMesh]\n    A --&gt; P[TextureProject]\n    A --&gt; I[Transform]\n\n    I --- J[Camera]\n    I --- K[ExternalObject]\n    I --- L[Light]\n    I --- M[Mesh]\n    I --- N[PyTurntable]\n    I --- O[ShadowCatcher]\n</code></pre> <p></p> <p>If you create a Turntable, you will notice that it is an Entity that has two Modules: Transform and Turntable. In the same fashion, a folder only has a Transform Module.</p>"},{"location":"main_pages/classes/fixed_objects.html","title":"Fixed Objects","text":""},{"location":"main_pages/classes/fixed_objects.html#backdrop","title":"Backdrop","text":"<p>class BackdropObject</p> <p></p>"},{"location":"main_pages/classes/fixed_objects.html#baker","title":"Baker","text":"<p>class BakerObject</p> <p></p>"},{"location":"main_pages/classes/fixed_objects.html#bakertarget-object","title":"BakerTarget Object","text":"<p>class BakerTargetObject </p>"},{"location":"main_pages/classes/fixed_objects.html#fog","title":"Fog","text":"<p>class FogObject</p> <p></p>"},{"location":"main_pages/classes/fixed_objects.html#render-object","title":"Render Object","text":"<p>class RenderObject</p> <p></p>"},{"location":"main_pages/classes/fixed_objects.html#skybox","title":"SkyBox","text":"<p>class SkyBoxObject</p> <p></p>"},{"location":"main_pages/classes/fixed_objects.html#submesh","title":"SubMesh","text":"<p>class SubMesh Object</p> <p></p>"},{"location":"main_pages/classes/fixed_objects.html#textureproject","title":"TextureProject","text":"<p>class TextureProjectObject</p> <p></p>"},{"location":"main_pages/classes/scene_object.html","title":"Scene Object","text":"<p>class SceneObject</p> <p>This is the base class from which all objects in the Scene deribe.</p> <p>Subclases: BackdropObject BakerObject BakerTargetObject FogObject RenderObject SkyBoxObject SubMeshObject TextureProjectObject TransformObject</p>"},{"location":"main_pages/classes/scene_object.html#instance-variables","title":"Instance Variables","text":"<pre><code>var collapsed\n</code></pre> <p>Controls the display of the object's children in the outline view.</p> <pre><code>var locked\n</code></pre> <p>Controls the display of the object's children in the outline view.</p> <p><pre><code>var name\n</code></pre> <pre><code>var parent\n</code></pre> <pre><code>var uid\n</code></pre> <pre><code>var visible\n</code></pre></p> example<pre><code>var collapsed\n</code></pre>"},{"location":"main_pages/classes/scene_object.html#methods","title":"Methods","text":"<pre><code>def destroy()\n</code></pre> <pre><code>def duplicate(name: str = '') \u2011&gt; SceneObject\n</code></pre> <pre><code>def findInChildren(searchStr: str) \u2011&gt; SceneObject\n</code></pre> <pre><code>def getBounds() \u2011&gt; List[List[float]]\n</code></pre> <pre><code>def getChildren() \u2011&gt; List[SceneObject]\n</code></pre> <pre><code>def setKeyframe(lerp: str)\n</code></pre>"},{"location":"main_pages/classes/transform.html","title":"Moveable Objects","text":""},{"location":"main_pages/classes/transform.html#transform","title":"Transform","text":"<p>This is the core module that all movable objects have.  It stores the position of the object's coordinates in the world, and it is represented in the viewport with a gizmo.</p> <p>It is the base class that allows objects to move in the viewport.</p>"},{"location":"main_pages/classes/transform.html#class","title":"Class","text":"<pre><code>class TransformObject(SceneObject):\n</code></pre> <p>Class for...</p>"},{"location":"main_pages/classes/transform.html#instance-variables","title":"Instance variables","text":"<p><pre><code>var pivot \n</code></pre> <pre><code>var position \n</code></pre> <pre><code>var rotation \n</code></pre> <pre><code>var scale \n</code></pre></p>"},{"location":"main_pages/classes/transform.html#methods","title":"Methods","text":"<pre><code>def centerPivot():\n</code></pre> <p>Centers the pivot point of this object to its bounding box.</p>"},{"location":"main_pages/classes/transform.html#camera","title":"Camera","text":"<p>class CameraObject</p>"},{"location":"main_pages/classes/transform.html#external-object","title":"External Object","text":"<p>class ExternalObject</p>"},{"location":"main_pages/classes/transform.html#light","title":"Light","text":"<p>class LightObject</p>"},{"location":"main_pages/classes/transform.html#mesh","title":"Mesh","text":"<p>class MeshObject</p>"},{"location":"main_pages/classes/transform.html#turntable","title":"Turntable","text":"<p>class PyTurntableObject</p>"},{"location":"main_pages/classes/transform.html#shadowcatcher","title":"ShadowCatcher","text":"<p>class ShadowCatcherObject</p>"},{"location":"main_pages/functions/IO.html","title":"IO Read and Write","text":"<p>This sections has all the functions that you need to save, write and load data in and out of Toolbag.</p>"},{"location":"main_pages/functions/IO.html#loadscene","title":"loadScene","text":"<pre><code>def loadScene(filePath: str, downloadMissingLibraryAssets: bool = False)\n</code></pre> <p>Loads a Marmoset Toolbag scene file. Unsaved changes to any currently open scenes are lost.</p>"},{"location":"main_pages/functions/IO.html#newscene","title":"newScene","text":"<pre><code>def newScene()\n</code></pre> <p>Creates a new empty scene. Any unsaved changes in the current scene will be lost.</p>"},{"location":"main_pages/functions/IO.html#quit","title":"quit","text":"<pre><code>def quit()\n</code></pre> <p>Quits Toolbag. Any unsaved changes will be lost.</p>"},{"location":"main_pages/functions/IO.html#shutdownplugin","title":"shutdownPlugin","text":"<pre><code>def shutdownPlugin()\n</code></pre> <p>Stops and shuts down the currently running plugin.</p>"},{"location":"main_pages/functions/IO.html#savescene","title":"saveScene","text":"<pre><code>def def saveScene(filePath: str)\n</code></pre> <p>Saves a Marmoset Toolbag scene file. If a scene file path is not specified, the scene will be saved to its existing location.</p>"},{"location":"main_pages/functions/IO.html#importmaterial","title":"importMaterial","text":""},{"location":"main_pages/functions/IO.html#importmodel","title":"importModel","text":""},{"location":"main_pages/functions/IO.html#freeunusedresources","title":"freeUnusedResources","text":""},{"location":"main_pages/functions/bake.html","title":"Bake","text":"<p>One of Toolbag\u2019s core functions is baking.</p> <p>Baking is the process of precomputing complex calculations\u2014such as lighting, shadows, and material details\u2014and storing them in textures. This optimization reduces real-time processing demands, freeing up system resources.</p> <p>In this sense, baking is the opposite of real-time rendering, where these calculations happen dynamically.</p> <p></p>"},{"location":"main_pages/functions/bake.html#bakeall","title":"BakeAll","text":"code<pre><code>def bakeAll()\n</code></pre> <p>BakeAll will parse all Bake Projects in the Scene and bake all selected maps.</p> example<pre><code>import mset\n\ndef RunPlugin():\n    mset.bakeAll()\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre>"},{"location":"main_pages/functions/callbacks.html","title":"Callbacks","text":"<p>To better understand callbacks, you can think of the phrase \"call me back\"\u2014meaning \"contact me when something happens.\"  </p> <p>In programming, a callback is like asking the program to notify you once a task or event is finished, so you don\u2019t have to wait for it to complete.</p> <p></p>"},{"location":"main_pages/functions/callbacks.html#onperiodicupdate","title":"onPeriodicUpdate","text":"<p>This callback runs periodically, a few times per second.  This can be useful for plugins that need to refresh external files or make frequent checks.  Since this callback runs frequently, be careful to keep the average execution time low.</p> <p>var onPeriodicUpdate. </p> <pre><code>import mset\n\ndef doThis():\n    print(\"I'm doing something all the time\")\n\nmset.callbacks.onPeriodicUpdate = doThis\n</code></pre> <p>With this code \ud83d\udc46 you can constantly call a </p> <p></p>"},{"location":"main_pages/functions/callbacks.html#onregainfocus","title":"onRegainFocus","text":"<p>This callback runs every time you come back to Toolbag.</p> <pre><code>import mset\n\ndef doThis():\n    print(\"Ooh, Toolbag regain focus\")\n\nmset.callbacks.onRegainFocus = doThis\n</code></pre> <p></p>"},{"location":"main_pages/functions/callbacks.html#onscenechanged","title":"onSceneChanged","text":"<p>This callback runs every single time you change something inside Toolbag.</p> <pre><code>import mset\n\ndef doThis():\n    print(\"Ooh, you just change something in Toolbag\")\n\nmset.callbacks.onSceneChanged = doThis\n</code></pre> <p></p>"},{"location":"main_pages/functions/callbacks.html#onsceneloaded","title":"onSceneLoaded","text":"<p>This callback runs precisely when Toolbag finishes loading a scene.</p> <pre><code>import mset\n\ndef doThis():\n    print(\"This scene has been loaded\")\n\nmset.callbacks.onSceneLoaded = doThis\n</code></pre> <p></p>"},{"location":"main_pages/functions/callbacks.html#onshutdownplugin","title":"onShutdownPlugin","text":"<p>This callback runs exactly when the plugin is closed.</p> <p><pre><code>import mset\n\ndef doThis():\n    print(\"Uh-oh, your plugin is closed\")\n\nmset.callbacks.onShutdownPlugin = doThis\n</code></pre> </p>"},{"location":"main_pages/functions/camera_frame.html","title":"Camera","text":"<p>These two independant functions should not be confused with the camera itself.</p> <p>These are just two handy high-order functions for quickly setting up the camera.</p>"},{"location":"main_pages/functions/camera_frame.html#frame-object","title":"frame Object","text":"code<pre><code>def frameObject(object: SceneObject)\n</code></pre> <p>This function Adjusts the active camera to frame the object, making it fully visible and centered in the viewport.</p> example<pre><code>import mset\n\ndef RunPlugin():\n    object = mset.getSelectedObject() #make sure to select an object\n    mset.frameObject(object)\n\n    print(cam.name)\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre>"},{"location":"main_pages/functions/camera_frame.html#frame-scene","title":"frame Scene","text":"code<pre><code>def frameScene()\n</code></pre> <p>Centers and frames the entire scene in the current camera.</p> <p>Notice, you don't need to specify any object, because Toolbag calculates the bounds of the scene automatically.</p> example<pre><code>import mset\n\ndef RunPlugin():\n    mset.frameScene()\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre>"},{"location":"main_pages/functions/core_functions.html","title":"Core Functions","text":"<p>This is a list of all the main functions that Toolbag has</p>"},{"location":"main_pages/functions/dialog.html","title":"Dialog","text":"<p>In case you don't know, Dialog is a very special window that lets you talk to the OS. You use it to open or save files.</p> <p>In this case, windows are modal, and this only means they stop the flow of Toolbag until you are done negotiate with the OS.</p> <p></p>"},{"location":"main_pages/functions/dialog.html#showokcanceldialog","title":"showOkCancelDialog","text":"<p>def showOkCancelDialog(title: str, prompt: str) \u2011&gt; bool</p> <p>This command will open a modal dialog box. 'Title' will be the titlebar of the window and prompt the text inside the window. Returns True or False depending on whether OK or Cancel is selected.</p> <p>Useful when you want to confirm something with the user</p> <p><pre><code>import mset\n\ndef RunPlugin():\n    mset.showOkCancelDialog(\"Title of the window\", \"Message inside the box\")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> </p>"},{"location":"main_pages/functions/dialog.html#showokdialog","title":"showOkDialog","text":"<p>def showOkDialog(title: str, prompt: str) \u2011&gt; bool</p> <p>This command will open a modal dialog box. 'Title' will be the titlebar of the window and prompt the text inside the window.</p> <p>The key difference with showOkCancelDialog is that showOkDialog always returns true no matter what.</p> <p>Useful for sending a direct message to the user.</p> <pre><code>import mset\n\ndef RunPlugin():\n    mset.showOkDialog(\"Title of the window\", \"Message inside the box\")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/dialog.html#showopenfiledialog","title":"showOpenFileDialog","text":"<p>def showOpenFileDialog(fileTypes: List[str] = [], multiple: bool = False) \u2011&gt; str</p> <p>This command will open a modal dialog box so a file can be selected.</p> <p>If a file is selected, showOpenFileDialog will return the full path. If the cancel button is pressed, it will return and empty string.</p> <p>Optionally, the fileTypes can be specified.</p> <pre><code>import mset\n\ndef RunPlugin():\n\n    result = mset.showOpenFileDialog(\"Title of the window\", \"Message inside the box\")\n    print(f\"Dialog result: {result}\")  # Debugging output\n\n    if result:\n        print(result)\n    else:\n        print(\"User closed the dialog without pressing OK\")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/dialog.html#showopenfolderdialog","title":"showOpenFolderDialog","text":"<p>def showOpenFolderDialog() \u2011&gt; str</p> <p>This command will open a modal dialog box so a folder can be selected.</p> <p>If a folder is selected, showOpenFileDialog will return the full path. If the cancel button is pressed, it will return and empty string.</p> <p>Yeah, it's the same as showOpenFileDialog but for folders.</p> <pre><code>import mset\n\ndef RunPlugin():\n\n    result = mset.showOpenFolderDialog()\n    print(f\"Dialog result: {result}\")  # Debugging output\n\n    if result:\n        print(result)\n    else:\n        print(\"User closed the dialog without pressing OK\")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/dialog.html#showsavefiledialog","title":"showSaveFileDialog","text":"<p>def showSaveFileDialog(fileTypes: List[str] = []) \u2011&gt; str</p> <p>This command will open a modal dialog box so a file can be save.</p> <p>If a folder is selected, showOpenFileDialog will return the full path. If the cancel button is pressed, it will return and empty string.</p> <pre><code>import mset\n\ndef RunPlugin():\n\n    result = mset.showSaveFileDialog()\n    print(f\"Dialog result: {result}\")  # Debugging output\n\n    if result:\n        print(result)\n    else:\n        print(\"User closed the dialog without pressing OK\")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/export.html","title":"Export Functions","text":"<p>If you need to export something out of Toolbag, then these core functions will help you out.</p> <p>It is essential to save files in custom folders instead of OS locations like the Desktop, which may have additional read and write permission restrictions. Normally, creating a folder is enough.</p>"},{"location":"main_pages/functions/export.html#exportviewer","title":"exportViewer","text":"<p>\u203c\ufe0fERROR Is this not part of the API?</p> code<pre><code>def exportViewer(\n                path: str = '',\n                title: str = '',\n                author: str = '',\n                authorURL: str = '', \n                textureQuality: str = 'high',\n                highResThumbnail: bool = False,\n                html: bool = False,\n                autoStartHTML: bool = False,\n                fullframeHTML=False,\n                presetHTML: bool = False,\n                width: int = -1,\n                height: int = -1,\n                exportAnimations: bool = False,\n                exportModelShowcase: bool = False,\n                autoPlayAnimations: bool = False,\n                showPlaybackControls: bool = False\n                )\n</code></pre> example<pre><code>def exportViewer(\n                path: 'desktop',\n                title: 'job',\n                author: str = '',\n                authorURL: str = '', \n                textureQuality: str = 'high',\n                highResThumbnail: bool = False,\n                html: bool = False,\n                autoStartHTML: bool = False,\n                fullframeHTML=False,\n                presetHTML: bool = False,\n                width: int = -1,\n                height: int = -1,\n                exportAnimations: bool = False,\n                exportModelShowcase: bool = False,\n                autoPlayAnimations: bool = False,\n                showPlaybackControls: bool = False\n                )\n</code></pre>"},{"location":"main_pages/functions/export.html#exportsceneusd","title":"exportSceneUSD","text":"<pre><code>exportSceneUSD(\n    path: str = '',\n    models: bool = True,\n    lights: bool = True,\n    skies: bool = True,\n    cameras: bool = True,\n    materials: bool = True,\n    normals: bool = True,\n    uvmaps: bool = True,\n    vertexcolors: bool = True,\n    triangulate: bool = False,\n    subdivision: bool = False,\n    displacement: bool = False,\n    copyfilereferences: bool = False,\n    skiptextures: bool = False,\n    uniquetextures: bool = False )\n</code></pre> <p>SNIPPET</p> <pre><code>import mset\n\ndef RunPlugin():\n    mset.exportSceneUSD(\"G:\\\\Borrar\", True, True, True, True, True, True, True,True, False, False, False, False, False, False)\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre>"},{"location":"main_pages/functions/export.html#exportscenefbx","title":"exportSceneFBX","text":""},{"location":"main_pages/functions/export.html#exportscenegltf","title":"exportSceneGLTF","text":""},{"location":"main_pages/functions/export.html#exportsceneobj","title":"exportSceneOBJ","text":""},{"location":"main_pages/functions/export.html#exportscenecollada","title":"exportSceneCOLLADA","text":""},{"location":"main_pages/functions/image_process.html","title":"Processing images","text":""},{"location":"main_pages/functions/image_process.html#compareimages","title":"compareImages","text":""},{"location":"main_pages/functions/image_process.html#compressfile","title":"compressFile","text":""},{"location":"main_pages/functions/image_process.html#compressfolder","title":"compressFolder","text":""},{"location":"main_pages/functions/image_process.html#generatedifferenceimage","title":"generateDifferenceImage","text":""},{"location":"main_pages/functions/library.html","title":"Library","text":""},{"location":"main_pages/functions/library.html#getlibrary","title":"getLibrary","text":""},{"location":"main_pages/functions/log.html","title":"Log","text":"<p>Keep records of the events or activities of the system or your plugin.</p> <p></p>"},{"location":"main_pages/functions/log.html#log_1","title":"log","text":"<p>Prints text in the console. It is similar to print().</p> <p>def log (msg: str)</p> <pre><code>import mset\n\ndef RunPlugin():\n    mset.log (\"\\nThis is the message I wanted to log \")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/log.html#err","title":"err","text":"<p>Prints text in the console, but as an error.</p> <p>The core difference with log is that if you are not filtering Show Only Errors, you won't see the message error, and viseversa. This is useful when you are debugging.</p> <p>def err (msg: str)</p> <pre><code>import mset\n\ndef RunPlugin():\n    mset.err (\"\\nThis message is an error \")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/log.html#fail","title":"fail","text":"<p>Prints text directly to the log.txt Toolbag's internal file. It's mainly for internal use.</p> <pre><code>import mset\n\ndef RunPlugin():\n    mset.fail (\"\\nThis message will appear in the log.txt file \")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/log.html#cleartestlog","title":"clearTestLog","text":"<p>For internal use of the Marmoset Team. \ud83d\ude0a</p> <p></p>"},{"location":"main_pages/functions/objects_materials.html","title":"Objects and Materials","text":""},{"location":"main_pages/functions/objects_materials.html#findmaterial","title":"findMaterial","text":""},{"location":"main_pages/functions/objects_materials.html#getallmaterials","title":"getAllMaterials","text":""},{"location":"main_pages/functions/objects_materials.html#getselectedmaterial","title":"getSelectedMaterial","text":""},{"location":"main_pages/functions/objects_materials.html#getselectedmaterialgroup","title":"getSelectedMaterialGroup","text":""},{"location":"main_pages/functions/objects_materials.html#findobject","title":"findObject","text":""},{"location":"main_pages/functions/objects_materials.html#getallobjects","title":"getAllObjects","text":""},{"location":"main_pages/functions/objects_materials.html#setselectedobjects","title":"setSelectedObjects","text":""},{"location":"main_pages/functions/objects_materials.html#groupobjects","title":"groupObjects","text":""},{"location":"main_pages/functions/objects_materials.html#getselectedobject","title":"getSelectedObject","text":""},{"location":"main_pages/functions/objects_materials.html#getselectedobjects","title":"getSelectedObjects","text":""},{"location":"main_pages/functions/render.html","title":"Render Functions","text":"<p>Ready to render your art? </p> <p>These core core functions are designed so you can take a look at the final product of your art.</p>"},{"location":"main_pages/functions/render.html#setcamera","title":"setCamera","text":"<p>def setCamera(camera: CameraObject)</p> <p>Selects the camera that you pass as the active one in the Viewport. This is the equivalent of selecting a camera using the dropdown menu in the Viewport.</p> <p>Useful if you have a lot of cameras and you want to switch between them by code.</p> <pre><code>import mset\n\ndef RunPlugin():\n    cam = mset.getSelectedObject() #make sure to select a camera\n    mset.setCamera(cam)\n\n    print(cam.name)\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p> <p>By default, Viewport Rendering (F10) uses the current active camera in the Viewport as reference to render. If you have more than one Viewport opened, then the last active one will be the reference.</p> <p></p>"},{"location":"main_pages/functions/render.html#readandexportstamp","title":"readAndExportStamp","text":"<p>Internal use by Marmoset's team for stamp brush creation.</p> <p>def readAndExportStamp(inputPath: str, outputPath: str)  </p> <p></p>"},{"location":"main_pages/functions/render.html#rendercamera","title":"renderCamera","text":"<p>Renders an image with the given camera with the current resolution/format settings from the render scene object. If no camera is specified, the main camera will be used. </p> <p>ViewportPass accepts a render pass string (from component view / render passes dropdown box), if the string is not on the list or an empty string is used, the Full Quality pass is rendered by default.</p> <p>Returns an mset.Image instance.</p> <p>Optionally takes a path parameter which specifies where to write the image. If no path is specified, no image file will be written.</p> <p>def renderCamera(      path: str = '',     width: int = -1,     height: int = -1,     sampling: int = -1,     transparency: bool = False,     camera: str = '',     viewportPass: str = '') \u2011&gt; Image</p> <pre><code>import mset\n\ndef RunPlugin():\n    mset.renderCamera( path = \"C:\\\\Users\\\\Mauro Fuentes\\\\Desktop\\\\Test Code\\\\jon.png\",  width= -1, height= -1,  sampling = -1, transparency= False,  camera = '',  viewportPass = '')\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p>!! The path is optional because you may not be interested in saving the result to disk just yet, but to handle the raw data first.</p> <p>!! The path needs to also contain the full name of the final file \"C:\\Users\\Desktop\\Test Code\\MyRender.png\"</p> <pre><code>import mset\n\ndef RunPlugin():\n    image_data = mset.renderCamera(camera=\"MyCamera\")  # No path specified, so no file is saved\n\n    if image_data:\n        print(\"Image data exists!\")\n    else:\n        print(\"No image data.\")\n\n    if image_data != b'':\n        print(\"Image data has bytes!\")\n    else:\n        print(\"No bytes in image data.\")\n\n    print(image_data)\n    print(f\"Type: {type(image_data)}\")\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre> <p></p>"},{"location":"main_pages/functions/render.html#renderimages","title":"renderImages","text":"<p>Renders images with the render scene object's current settings and cameras.  To render a single image, see renderCamera().</p> <p>def renderImages (width: int = -1, height: int = -1, sampling: int = -1, transparency: bool = False)</p> <p></p>"},{"location":"main_pages/functions/render.html#rendervideos","title":"renderVideos","text":"<p>def renderVideos(width: int = -1, height: int = -1, sampling: int = -1, transparency: bool = False)</p> <p>Captures an animation into a video file or image sequence. The animation will be written into the file path(s) specified in the scene's render object.</p>"},{"location":"main_pages/functions/scene_info.html","title":"Scene Information","text":""},{"location":"main_pages/functions/scene_info.html#getpluginpath","title":"getPluginPath","text":""},{"location":"main_pages/functions/scene_info.html#getpreferences","title":"getPreferences","text":""},{"location":"main_pages/functions/scene_info.html#getscenebounds","title":"getSceneBounds","text":""},{"location":"main_pages/functions/scene_info.html#getscenepath","title":"getScenePath","text":""},{"location":"main_pages/functions/scene_info.html#getsceneunitscale","title":"getSceneUnitScale","text":""},{"location":"main_pages/functions/scene_info.html#getgraphicsadaptername","title":"getGraphicsAdapterName","text":""},{"location":"main_pages/functions/scene_info.html#gettoolbagversion","title":"getToolbagVersion","text":""},{"location":"main_pages/functions/scene_info.html#gettracebackendtype","title":"getTraceBackendType","text":""},{"location":"main_pages/functions/store_item.html","title":"Store Item","text":""},{"location":"main_pages/functions/store_item.html#getstoreitem","title":"getStoreItem","text":""},{"location":"main_pages/functions/store_item.html#setstoreitem","title":"setStoreItem","text":""},{"location":"main_pages/functions/timeline.html","title":"Timeline","text":""},{"location":"main_pages/functions/timeline.html#gettimeline","title":"getTimeline","text":"<p>def getTimeline() \u2011&gt; Timeline</p> <p>Returns the current scene's timeline, for animation control.</p> <pre><code>import mset\n\ndef RunPlugin():\n    timeline = mset.getTimeline()\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"Run Plugin\")\nwindow.addElement(myButton)\n\nmyButton.onClick = RunPlugin\n</code></pre>"},{"location":"main_pages/other%20classes/preferences.html","title":"Preferences","text":"<p>These are the preferences that you can customise in Toolbag.</p> <p>You can find it's UI counterpart in Edit Menu &gt; Preferences </p>"},{"location":"main_pages/other%20classes/preferences.html#automodelreload","title":"autoModelReload","text":""},{"location":"main_pages/other%20classes/preferences.html#autosaveduration","title":"autoSaveDuration","text":""},{"location":"main_pages/other%20classes/preferences.html#autosavefoldersize","title":"autoSaveFolderSize","text":""},{"location":"main_pages/other%20classes/preferences.html#autosavelocation","title":"autoSaveLocation","text":""},{"location":"main_pages/other%20classes/preferences.html#autosavemaxcount","title":"autoSaveMaxCount","text":""},{"location":"main_pages/other%20classes/preferences.html#autosaverelativetomaster","title":"autoSaveRelativeToMaster","text":""},{"location":"main_pages/other%20classes/preferences.html#autosaveunits","title":"autoSaveUnits","text":""},{"location":"main_pages/other%20classes/preferences.html#autosaves","title":"autoSaves","text":""},{"location":"main_pages/other%20classes/preferences.html#autotexturereload","title":"autoTextureReload","text":""},{"location":"main_pages/other%20classes/preferences.html#bakescheduling","title":"bakeScheduling","text":""},{"location":"main_pages/other%20classes/preferences.html#browseformissingfiles","title":"browseForMissingFiles","text":""},{"location":"main_pages/other%20classes/preferences.html#browseformissingmeshes","title":"browseForMissingMeshes","text":""},{"location":"main_pages/other%20classes/preferences.html#defaultsceneunit","title":"defaultSceneUnit","text":""},{"location":"main_pages/other%20classes/preferences.html#defaulttangenthandedness","title":"defaultTangentHandedness","text":""},{"location":"main_pages/other%20classes/preferences.html#defaulttangentmethod","title":"defaultTangentMethod","text":""},{"location":"main_pages/other%20classes/preferences.html#defaultwatermark","title":"defaultWatermark","text":""},{"location":"main_pages/other%20classes/preferences.html#displaytooltips","title":"displayTooltips","text":""},{"location":"main_pages/other%20classes/preferences.html#enablevsyncoffrtaccumulation","title":"enableVsyncOffRTAccumulation","text":""},{"location":"main_pages/other%20classes/preferences.html#import8mlwithmaterials","title":"import8mlWithMaterials","text":""},{"location":"main_pages/other%20classes/preferences.html#importabcwithmaterials","title":"importAbcWithMaterials","text":""},{"location":"main_pages/other%20classes/preferences.html#importfbxwithmaterials","title":"importFbxWithMaterials","text":""},{"location":"main_pages/other%20classes/preferences.html#importmodelsasreferences","title":"importModelsAsReferences","text":""},{"location":"main_pages/other%20classes/preferences.html#importobjwithmaterials","title":"importObjWithMaterials","text":""},{"location":"main_pages/other%20classes/preferences.html#importplywithmaterials","title":"importPlyWithMaterials","text":""},{"location":"main_pages/other%20classes/preferences.html#importstlwithmaterials","title":"importStlWithMaterials","text":""},{"location":"main_pages/other%20classes/preferences.html#importusdwithmaterials","title":"importUsdWithMaterials","text":""},{"location":"main_pages/other%20classes/preferences.html#libraryautoupdate","title":"libraryAutoUpdate","text":""},{"location":"main_pages/other%20classes/preferences.html#librarylocalpath","title":"libraryLocalPath","text":""},{"location":"main_pages/other%20classes/preferences.html#libraryuserpath","title":"libraryUserPath","text":""},{"location":"main_pages/other%20classes/preferences.html#newscenepref","title":"newScenePref","text":""},{"location":"main_pages/other%20classes/preferences.html#outputdirectory","title":"outputDirectory","text":""},{"location":"main_pages/other%20classes/preferences.html#raytracebackend","title":"rayTraceBackend","text":""},{"location":"main_pages/other%20classes/preferences.html#rememberdimensions","title":"rememberDimensions","text":""},{"location":"main_pages/other%20classes/preferences.html#scenestartpref","title":"sceneStartPref","text":""},{"location":"main_pages/other%20classes/preferences.html#tabletbackend","title":"tabletBackend","text":""},{"location":"main_pages/other%20classes/preferences.html#tabletcompatibilitymode","title":"tabletCompatibilityMode","text":""},{"location":"main_pages/other%20classes/preferences.html#undoverificationcheck","title":"undoVerificationCheck","text":""},{"location":"main_pages/other%20classes/preferences.html#unsavedchangesprompts","title":"unsavedChangesPrompts","text":""},{"location":"main_pages/other%20classes/preferences.html#updatecheck","title":"updateCheck","text":""},{"location":"main_pages/other%20classes/preferences.html#updatecheckallowbeta","title":"updateCheckAllowBeta","text":""},{"location":"main_pages/user_interface/ui.html","title":"User Interface","text":"<p>In this section, you'll find everything you need to create the UI for your addons.</p> <p>Understanding the core structure of the UI code is a valuable exercise for building a solid foundation.</p> <pre><code>\ngraph LR\n    A[UIControl] --&gt; B[UIWindow]\n    A --&gt; C[UIDrawer]\n    A --&gt; D[UIScrollBox]\n    A --&gt; E[UIButton]\n    A --&gt; F[UILabel]\n    A --&gt; G[UICheckBox]\n    A --&gt; H[UIListBox]\n    A --&gt; P[UIColorPicker]\n    A --&gt; I[UIBaseSlider]\n    I --&gt; J[UISliderInt]\n    I --&gt; K[UISliderFloat]\n    A --&gt; L[UIBaseTextField]\n    L --&gt; M[UITextField]\n    L --&gt; N[UITextFieldFloat]\n    L --&gt; O[UITextFieldInt]\n</code></pre> <p></p> <p>All UI members inherit from UIControl, but not all are equally significant. The chart above is organized in a logical order, based on their functionality and importance.</p> <p> </p>"},{"location":"main_pages/user_interface/ui.html#uicontrol","title":"UIControl","text":"<p>Warning</p> <p>The UIControl is the base entity from which all UI elements derive. You don't use it directly.</p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uiwindow","title":"UIWindow","text":"<p>UIWindow is the core component for any plugin UI in Marmoset Toolbag, serving as the foundation for rendering visuals. All plugin UIs begin by creating a UIWindow, to which other UI elements are added.</p> <p></p> <pre><code>import mset\n\nwindow = mset.UIWindow()\n</code></pre> <p> </p> <p></p>"},{"location":"main_pages/user_interface/ui.html#class","title":"Class","text":"<pre><code>class UIWindow(UIControl):\n</code></pre> <p>Class for creating a window. It is interesting to mention that you can create multiple windows.</p>"},{"location":"main_pages/user_interface/ui.html#instance-variables","title":"Instance variables","text":"<pre><code>var height \n</code></pre> <p>The height of the window in pixels.</p> <pre><code>var width  \n</code></pre> <p>The width of the window in pixels.</p> <pre><code>var title  \n</code></pre> <p>The title of the window.</p> <pre><code>var visible  \n</code></pre> <p>This returns true or false, depending on the state of the window.</p>"},{"location":"main_pages/user_interface/ui.html#methods","title":"Methods","text":"<pre><code>def addElement(child: UIControl) \n</code></pre> <p>This is the main method through which you add elements inside the windows.</p> <pre><code>def addReturn()\n</code></pre> <p>Puts all following elements on the next line. </p> <pre><code>def addSpace(width: float)\n</code></pre> <p>This adds emtpy space and puts all following elements after it. </p> <pre><code>def addStretchSpace()\n</code></pre> <p>Puts all following elements at the end of the line. </p> <pre><code>def clearElements()\n</code></pre> <p>Removes all elements from the window. </p> <pre><code>def close()\n</code></pre> <p>Closes the current window. </p> <pre><code>def getElements() \u2011&gt; List[UIControl]\n</code></pre> <p>Returns a list of all contained controls. </p> <p></p> <p></p> multiple windows example<pre><code>import mset\n\nwindow1 = mset.UIWindow()\nwindow1.title = \"Window 1\"\nwindow1.height = 90\nwindow1.width = 250\n\nwindow2 = mset.UIWindow()\nwindow1.title = \"Window 2\"\nwindow1.height = 50\nwindow1.width = 300\n</code></pre> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uidrawer","title":"UIDrawer","text":"<p>UIDrawer is your next level tool when it comes to UI organization. A drawer is basically a container that lives inside a Window. It behaves like an on/off accordion. When it's on, it will displayed the content, and hide it when it's off.</p> <p>You don't really need to use it: all other UI elements can be directly added to the UIWindow. </p> <p>Note</p> <p>You might be tempted to simply create a UIWindow and put a drawer inside, so you can add elements directly. But this is not the way it works. Both UIDrawer and UIScrollBox need their own UIWindow as a base. Once you have that UIWindow you need to hook up them up. </p> example creating a simple UIDrawer<pre><code>import mset\n\n# This is the main and the base window to create the UI\nmain_window = mset.UIWindow(\"UI Test\")\n\n# Here we will set up a new window just for the drawer\ndrawer = mset.UIDrawer(name=\"Settings\")\ndrawer_window = mset.UIWindow(name=\"Drawer Window\")\n\n# Here is where we link the new window and the drawer\ndrawer.containedControl = drawer_window\n\n# Notice you can add the button to the Drawer, or to the main_window\nbuttonA = mset.UIButton(\"Close Button\")\ndrawer_window.addElement(buttonA)\n\nmain_window.addElement(drawer)\n</code></pre> <p></p> <p>Note</p> <p>Of course you can add many UIDrawers.</p> example creating lots of UIDrawer<pre><code>import mset\n\n# This is the main and the base window to create the UI\nmain_window = mset.UIWindow(\"UI Test\")\n\n# Here we will set up a new window just for the drawer\ndrawer = mset.UIDrawer(name=\"Settings\")\ndrawer_window = mset.UIWindow(name=\"Drawer Window\")\n\n# Here is where we link the new window and the drawer\ndrawer.containedControl = drawer_window\n\n# Here we will set up a new window just for the drawer\ndrawerB = mset.UIDrawer(name=\"Settings\")\ndrawerB_window = mset.UIWindow(name=\"Drawer Window\")\ndrawerB.containedControl = drawerB_window\n\n# Notice you can add the button to the Drawer, or to the main_window\nbuttonA = mset.UIButton(\"Close Button\")\ndrawer_window.addElement(buttonA)\n\ndrawerB_window.addElement(buttonA)\n\nmain_window.addElement(drawer)\nmain_window.addReturn()\nmain_window.addElement(drawerB)\n</code></pre> <p></p> <p>Warning</p> <p>There is a known bug: if you create and empty Drawer, Toolbag will crash.</p> <pre><code>import mset\n\nmain_window = mset.UIWindow(\"UI Test\")\ndrawerA = mset.UIDrawer(name=\"Settings\")\n\nmain_window.addElement(drawerA)\n</code></pre> <p> </p> <p> </p>"},{"location":"main_pages/user_interface/ui.html#class_1","title":"Class","text":"<pre><code>class UIDrawer(UIControl):\n</code></pre> <p>Class for creating a drawer: which basically is a container for smaller object.</p>"},{"location":"main_pages/user_interface/ui.html#instance-variables_1","title":"Instance variables","text":"<pre><code>var containedControl \n</code></pre> <p>It's basically the UIWindow that gives the UIDrawer the hability to contain other UI elements</p> <pre><code>var onOpenClose \n</code></pre> <p>A callback event that triggers when the drawer is opened or closed.</p> <pre><code>var open \n</code></pre> <p>Order the drawer to open or close</p> <pre><code>var title \n</code></pre> <p>The title of the drawer</p>"},{"location":"main_pages/user_interface/ui.html#methods_1","title":"Methods","text":"<pre><code>var def setMinor(minor: bool)\n</code></pre> <p>Whether or not the drawer is dimmer.</p> <p>Warning</p> <p>There is a known bug: if you use setMinor, Toolbag will crash.</p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uiscrollbox","title":"UIScrollBox","text":"<p>UIScrollBox is the next type of Container at your disposal for UI organization. As with UIDrawer, UIScrollBox lives inside a Window.</p> <p>And it literally is a box with a scroll</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nscrollbox = mset.UIScrollBox()\nwindow.addElement(scrollbox)\n</code></pre> <p> </p> <p></p> <p>In the same way UIDrawer needed its own window, UIScrollBox also needs it.</p> example creting a ScrollBox<pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\n\n# create the window for the ScrollBox\nscrollbox_window = mset.UIWindow()\nscrollbox = mset.UIScrollBox()\nscrollbox.containedControl = scrollbox_window\n\nbuttonA = mset.UIButton(\"Close Button\")\n\nscrollbox_window.addElement(buttonA)\n\nwindow.addElement(scrollbox)\n</code></pre> <p></p>"},{"location":"main_pages/user_interface/ui.html#class_2","title":"Class","text":"<pre><code>class UIScrollBox(UIControl):\n</code></pre> <p>Class for creating a ScrollBox: which basically is a scrollable container.</p>"},{"location":"main_pages/user_interface/ui.html#instance-variables_2","title":"Instance variables","text":"<pre><code>var containedControl\n</code></pre> <p>As with UIDrawer, the containedControl is basically the UIWidnow that will let the ScrollBox have the ability to add elements inside</p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uibaseslider","title":"UIBaseSlider","text":"<p>Warning</p> <p>This is just an abstract class. Don't use it directly. Use UISliderInt and UISliderFloat instead. See below \ud83d\udc47</p>"},{"location":"main_pages/user_interface/ui.html#instance-variables_3","title":"Instance variables","text":"<pre><code>var onChange\n</code></pre> <p>A callback event that triggers when the slider value changes</p> <pre><code>var width\n</code></pre> <p>The width of the control.</p> <p></p> <p>Note</p> <p>Don't forget all Subclasses will inherit these two variables \ud83d\udc46 Check Callbacks if you have any doubts</p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uisliderint","title":"UISliderInt","text":"<p>This is a slider that counts using integers</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nsliderInt = mset.UISliderInt()\nwindow.addElement(sliderInt)\n</code></pre> <p> </p>"},{"location":"main_pages/user_interface/ui.html#class_3","title":"Class","text":"<pre><code>class UISliderInt(UIBaseSlider):\n</code></pre> <p>Class for creating a UISliderInt.</p>"},{"location":"main_pages/user_interface/ui.html#instance-variables_4","title":"Instance variables","text":"<pre><code>var logScale\n</code></pre> <p>The logarithmic exponent of the slider.</p> <pre><code>var logScaleCenter\n</code></pre> <p>The center of the logarithmic scale of the slider.</p> <pre><code>var max\n</code></pre> <p>The maximum value of the slider range.</p> <pre><code>var min\n</code></pre> <p>The minimum value of the slider range.</p> <pre><code>var value\n</code></pre> <p>The value of the slider.</p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uisliderfloat","title":"UISliderFloat","text":"<p>This is a slider that counts using floats</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nsliderFloat = mset.UISliderFloat()\nwindow.addElement(sliderFloat)\n</code></pre> <p> </p>"},{"location":"main_pages/user_interface/ui.html#class_4","title":"Class","text":"<pre><code>class UISliderFloat(UIBaseSlider):\n</code></pre> <p>Class for creating a UISliderInt.</p>"},{"location":"main_pages/user_interface/ui.html#instance-variables_5","title":"Instance variables","text":"<pre><code>var logScale\n</code></pre> <p>The logarithmic exponent of the slider.</p> <pre><code>var logScaleCenter\n</code></pre> <p>The center of the logarithmic scale of the slider.</p> <pre><code>var max\n</code></pre> <p>The maximum value of the slider range.</p> <pre><code>var min\n</code></pre> <p>The minimum value of the slider range.</p> <pre><code>var value\n</code></pre> <p>The value of the slider.</p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uibasetextfield","title":"UIBaseTextField","text":"<p>Warning</p> <p>This is just an abstract class. Don't use it directly. Use UITextField, UITextFieldFloat or UITextFieldInt instead. See below \ud83d\udc47</p>"},{"location":"main_pages/user_interface/ui.html#instance-variables_6","title":"Instance variables","text":"<pre><code>var onCancel\n</code></pre> <p>A callback that is triggered when the editing is canceled.</p> <pre><code>var onChange\n</code></pre> <p>A callback that is triggered when any editing is done.</p> <pre><code>var width\n</code></pre> <p>The width of the element</p> <p></p> <p>Note</p> <p>Don't forget all Subclasses will inherit these two variables \ud83d\udc46 Check Callbacks if you have any doubts</p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uitextfield","title":"UITextField","text":"<p>Enter text</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\ntextField = mset.UITextField()\nwindow.addElement(textField)\n</code></pre> <p> </p> <p></p> <pre><code>var value\n</code></pre> <p>The content of the text field.</p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uitextfieldfloat","title":"UITextFieldFloat","text":"<p>Same as TextField but this version works with float numbers</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\ntextFieldFloat = mset.UITextFieldFloat()\nwindow.addElement(textFieldFloat)\n</code></pre> <p> </p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uitextfieldint","title":"UITextFieldInt","text":"<p>UI text field that exclusively works with int values.</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\ntextFieldInt = mset.UITextFieldInt()\nwindow.addElement(textFieldInt)\n</code></pre> <p> </p> <p></p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uibutton","title":"UIButton","text":"<p>Add a button to perfom an action when clicked.</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nmyButton = mset.UIButton(\"click me\") #dont forget to add a name like 'click me'\nwindow.addElement(myButton)\n</code></pre> <p> </p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uicheckbox","title":"UICheckBox","text":"<p>A small square box that can be checked or unchecked to toggle an option on or off.</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nmyCheckBox = mset.UICheckBox()\nwindow.addElement(myCheckBox)\n</code></pre> <p>The images has two checkboxes, to show you both states.  </p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uicolorpicker","title":"UIColorPicker","text":"<p>A small square box that can be checked or unchecked to toggle an option on or off.</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nmyColorPicker = mset.UIColorPicker()\nwindow.addElement(myColorPicker)\n</code></pre> <p>Click on the little square to actually open the Color Picker Popup</p> <p> </p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uilabel","title":"UILabel","text":"<p>Very similar to UITextField, but this text is not inside a box.</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nmyLabel = mset.UILabel(\"My label\") # \ud83d\udc48 remember to actually add a label\nwindow.addElement(myLabel)\n</code></pre> <p> </p> <p></p> <p></p> <p></p>"},{"location":"main_pages/user_interface/ui.html#uilistbox","title":"UIListBox","text":"<p>This is a box that contains a list. It is really useful when you want to select something from a set of options. Or when your actual behaviour, depends on that option.</p> <pre><code>import mset\n\nwindow = mset.UIWindow(\"Test UI\")\nmyList = mset.UIListBox(\"Name of the list\") # \ud83d\udc48 remember to actually add a name\n\nmyList.addItem(\"Item 1\")\nmyList.addItem(\"Item 2\")\nmyList.addItem(\"Item 3\")\n\nwindow.addElement(myList)\n</code></pre> <p>Notice this is just a simple list of strings for demonstration purposes.</p> <p> </p> <p></p>"},{"location":"main_pages/user_interface/ui.html#instance-variables_7","title":"Instance variables","text":"<pre><code>var onMenuOpen\n</code></pre> <p>Callback that triggers when the list is opened</p> <pre><code>var onSelect\n</code></pre> <p>Callback that triggers when you confirm the selection of an item</p> <pre><code>var selectedItem\n</code></pre> <p>Returns the current selected item in the ListBox.</p> <pre><code>var title\n</code></pre> <p>The text title of the ListBox.</p>"},{"location":"main_pages/user_interface/ui.html#methods_2","title":"Methods","text":"<pre><code>def addItem(item: str)\n</code></pre> <p>Adds an item with the label specified to the ListBox.</p> <pre><code>def clearItems()\n</code></pre> <p>Removes all items from this ListBox.</p> <pre><code>def selectItemByName(name: str)\n</code></pre> <p>Selects the item that matches the name specified.</p> <pre><code>def selectNone()\n</code></pre> <p>Select no item on the list.</p>"}]}